	1. 초기 설정 (처음 한 번만)bash# 이름 설정

git config --global user.name "Your Name"

# 이메일 설정 (GitHub 이메일)
git config --global user.email "your@email.com"

# 확인
git config --list

	2. 프로젝트 시작새 프로젝트

bash# 폴더 만들고
mkdir my-project
cd my-project

# Git 초기화
git init

# 확인
ls -la  # .git 폴더 생김

--기존 프로젝트 클론
bashgit clone https://github.com/username/repo.git
cd repo

	3. 기본 작업 흐름

상태 확인
bash# 현재 상태 보기
git status

# 변경사항 확인
git diff

# 커밋 히스토리
git log
git log --oneline  # 한 줄로

	4. 파일 추가 (Staging)

bash# 특정 파일
git add main.go

# 여러 파일
git add main.go server.go

# 현재 폴더 전체
git add .

# 모든 파일
git add -A

# 확인
git status


	5. 커밋

bash# 커밋 (메시지와 함께)
git commit -m "feat: 첫 커밋"

# add + commit 동시에 (이미 추적 중인 파일만)
git commit -am "fix: 버그 수정"

# 커밋 확인
git log
```

---

	## 5.1  커밋 메시지 컨벤션

### 형식
```
<타입>: <제목>

<본문> (선택)

타입 종류
bashfeat: 새 기능
fix: 버그 수정
docs: 문서 수정
style: 코드 포맷팅
refactor: 리팩토링
test: 테스트 추가
chore: 빌드/설정 변경

# 예시
git commit -m "feat: 사용자 로그인 API 추가"
git commit -m "fix: DB 연결 에러 수정"
git commit -m "docs: README 작성"
git commit -m "refactor: 코드 정리"


	6. GitHub에 올리기

처음 연결
bash# GitHub에서 repo 만들고

# 원격 저장소 추가
git remote add origin https://github.com/username/repo.git

# 확인
git remote -v

# 첫 푸시
git push -u origin main
# 또는 (저장소가 master면)
git push -u origin master

#이후 푸시
bash# 작업 후
git add .
git commit -m "feat: 새 기능"
git push

# 강제 푸시 (조심!)
git push -f


	7. 브랜치
	7.1 브랜치 보기

bash# 로컬 브랜치
git branch

# 모든 브랜치 (원격 포함)
git branch -a

# 현재 브랜치 확인
git branch --show-current


	7.2 브랜치 만들기/이동
bash# 브랜치 생성
git branch feature-login

# 브랜치 이동
git checkout feature-login

# 생성 + 이동 동시에
git checkout -b feature-login

# 새 방식 (Git 2.23+)
git switch -c feature-login


	7.3 브랜치 합치기

bash# main으로 이동
git checkout main

# feature-login 합치기
git merge feature-login

# 브랜치 삭제
git branch -d feature-login


	8. 변경사항 되돌리기
	##아직 add 안 함

bash# 파일 하나 되돌리기
git checkout -- main.go

# 모든 변경사항 되돌리기
git checkout -- .

	##add는 했지만 commit 안 함

bash# staging 취소
git reset HEAD main.go

# 모든 파일
git reset HEAD .


	##commit 했지만 push 안 함

bash# 마지막 커밋 취소 (변경사항은 유지)
git reset --soft HEAD~1

# 마지막 커밋 취소 (변경사항도 삭제)
git reset --hard HEAD~1

# 커밋 메시지만 수정
git commit --amend -m "새 메시지"


	##push까지 함 (조심!)

bash# 되돌리기 (새 커밋 생성)
git revert HEAD

# 강제로 되돌리기 (위험!)
git reset --hard HEAD~1
git push -f


	9. 원격 저장소 동기화

##받아오기
bash# fetch (가져오기만)
git fetch origin

# pull (가져오고 merge)
git pull

# pull = fetch + merge
git pull origin main



	10. 충돌 해결

bash# pull 했는데 충돌 발생
git pull

# 파일 열어서 수동 수정
# <<<<<<< HEAD
# 내 코드
# =======
# 남의 코드
# >>>>>>> 

# 수정 후
git add .
git commit -m "merge: 충돌 해결"
git push


	11. .gitignore

.gitignore 파일
bash# .gitignore 파일 생성
touch .gitignore

# 내용 (예시)
cat << EOF > .gitignore
# 바이너리
main
*.exe

# 환경변수
.env
.env.local

# 의존성
node_modules/
vendor/

# IDE
.vscode/
.idea/
*.swp

# OS
.DS_Store
Thumbs.db

# 로그
*.log

# 빌드
dist/
build/
EOF

# 적용
git add .gitignore
git commit -m "chore: gitignore 추가"


	이미 추적 중인 파일 제거


bash# Git에서만 제거 (파일은 유지)
git rm --cached .env

# 커밋
git commit -m "chore: .env 추적 제거"




	10. 유용한 명령어

히스토리 보기
bash# 예쁘게 보기
git log --oneline --graph --all

# 특정 파일 히스토리
git log main.go

# 변경 내용 포함
git log -p

# 최근 5개
git log -5


변경사항 확인
bash# 아직 staging 안 된 변경
git diff

# staging된 변경
git diff --staged

# 특정 커밋 간 비교
git diff commit1 commit2

파일 히스토리
bash# 누가 언제 수정했는지
git blame main.go

# 특정 라인만
git blame -L 10,20 main.go


임시 저장 (stash)
bash# 현재 작업 임시 저장
git stash

# 다른 작업...

# 불러오기
git stash pop

# 목록 보기
git stash list



